package org.sweetest.platform.server.service.test.execution.config;

import org.jooq.lambda.Unchecked;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.sweetest.platform.server.api.file.FileSystemService;
import org.sweetest.platform.server.api.runconfig.RunConfiguration;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Properties;

@Service
public class SakuliRunConfigService {

    private static final Logger log = LoggerFactory.getLogger(SakuliRunConfigService.class);

    static final private String FILE_NAME = "sakuli.ui.properties";


    @Autowired
    private FileSystemService fileSystemService;

    @Autowired
    private RunConfigurationPropertyMapperService runConfigurationPropertyMapperService;

    public RunConfiguration getRunConfigFromProject(String path) {
        RunConfiguration runConfiguration = new RunConfiguration();
        try {
            Properties p = readPropertiesFileFromPath(path);
            runConfigurationPropertyMapperService.propertiesToRunConfiguration(p, runConfiguration);
        } catch (IOException e) {
            log.warn("Could not determine runconfig from properties. Using new created RunConfiguration", e);
        }
        return runConfiguration;
    }

    public boolean setRunConfigurationToProject(RunConfiguration runConfiguration, String path) {
        try {
            Properties p = new Properties(); //readPropertiesFileFromPath(path);
            runConfigurationPropertyMapperService.runConfigToProperties(runConfiguration, p);
            writePropertiesToPath(path, p);
            return true;
        } catch (IOException e) {
            log.warn("Couldn't write to " + path, e);
            return false;
        }
    }



    private void writePropertiesToPath(String path, Properties properties) throws IOException {
        Optional<OutputStream> optionalOutputStream = fileSystemService
                .getFileFromPath(path, FILE_NAME)
                .map(Unchecked.function(FileOutputStream::new));
        if (optionalOutputStream.isPresent()) {
            properties.store(optionalOutputStream.get(), "Autogenerated by Sakuli-UI" + LocalDateTime.now().toString());
        }
    }

    private Properties readPropertiesFileFromPath(String path) throws IOException {
        if(!fileSystemService.fileExists(Paths.get(path, FILE_NAME).toString())) {
            fileSystemService.writeFile(Paths.get(path, FILE_NAME).toString(), "".getBytes());
        }
        Optional<FileInputStream> optionalInputStream = fileSystemService
                .getFileFromPath(path, FILE_NAME)
                .map(Unchecked.function(FileInputStream::new));
        if (optionalInputStream.isPresent()) {
            Properties properties = new Properties();
            properties.load(optionalInputStream.get());
            return properties;
        } else {
            throw new IOException("Cannot find file " + FILE_NAME + " in " + path);
        }
    }

}
